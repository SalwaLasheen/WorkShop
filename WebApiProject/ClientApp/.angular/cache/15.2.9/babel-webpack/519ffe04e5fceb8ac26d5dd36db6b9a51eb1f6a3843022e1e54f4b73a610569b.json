{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet ProfileComponent = class ProfileComponent {\n  constructor(fb, toastr, service) {\n    this.fb = fb;\n    this.toastr = toastr;\n    this.service = service;\n    this.DialField = new FormControl();\n    this.SourceIdField = new FormControl();\n    this.LangIdField = new FormControl();\n    this.bucket = [];\n    this.options = [];\n  }\n  ngOnInit() {\n    this.loadForm();\n  }\n  loadForm() {\n    this.formGroup = this.fb.group({\n      DialField: [\"\", [Validators.required]],\n      SourceIdField: [\"\"],\n      LangIdField: [\"\"],\n      categoy: [\"\"]\n    });\n  }\n  Clear() {\n    this.formGroup.reset();\n    this.loadForm();\n  }\n  AddNewProfile() {\n    if (this.formGroup.invalid) {\n      this.HandleConditionalForm();\n      return;\n    }\n    console.log(\"AddNewProfile\", this.formGroup.value);\n    return this.service.createNewProfile(this.formGroup.value).subscribe(res => {\n      this.response = res;\n      this.options = res.bucketInfo.optionsList;\n      this.bucket = res.bucketInfo;\n      console.log(this.bucket);\n      console.log(this.response);\n      this.object = JSON.stringify(JSON.parse(res), null, 2);\n      this.showToasterSuccess(\"Successfully Posted\");\n      this.Clear();\n    }, err => {\n      console.log(err);\n      this.showToasterError(err.error);\n    });\n  }\n  HandleConditionalForm() {\n    if (this.formGroup.get(\"dialField\")?.invalid) return this.showToasterError('Invalid Dial Number');\n  }\n  showToasterError(message) {\n    return this.toastr.error(message);\n  }\n  showToasterSuccess(message) {\n    return this.toastr.success(message);\n  }\n};\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);\nexport { ProfileComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAWzE,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAkB3BC,YAAoBC,EAAe,EACzBC,MAAqB,EACtBC,OAAuB;IAFZ,OAAE,GAAFF,EAAE;IACZ,WAAM,GAANC,MAAM;IACP,YAAO,GAAPC,OAAO;IAbhB,cAAS,GAAgB,IAAIN,WAAW;IACxC,kBAAa,GAAgB,IAAIA,WAAW;IAC5C,gBAAW,GAAgB,IAAIA,WAAW;IAC1C,WAAM,GAAS,EAAE;IAEjB,YAAO,GAAU,EAAE;EASnB;EAEAO,QAAQ;IAEN,IAAI,CAACC,QAAQ,EAAE;EAEjB;EAEAA,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC7BC,SAAS,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,CAAC,CAAC;MACtCC,aAAa,EAAE,CAAC,EAAE,CAAC;MACnBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,OAAO,EAAC,CAAC,EAAE;KACZ,CAAC;EACJ;EAEAC,KAAK;IACD,IAAI,CAACP,SAAS,CAACQ,KAAK,EAAE;IACrB,IAAI,CAACT,QAAQ,EAAE;EACpB;EAEAU,aAAa;IACX,IAAI,IAAI,CAACT,SAAS,CAACU,OAAO,EAAE;MAC1B,IAAI,CAACC,qBAAqB,EAAE;MAC5B;;IAEJC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,IAAI,CAACb,SAAS,CAACc,KAAK,CAAG;IACjD,OAAO,IAAI,CAACjB,OAAO,CAACkB,gBAAgB,CAAC,IAAI,CAACf,SAAS,CAACc,KAAK,CAAC,CACvDE,SAAS,CAAEC,GAAG,IAAI;MAClB,IAAI,CAACC,QAAQ,GAACD,GAAG;MACjB,IAAI,CAACE,OAAO,GAACF,GAAG,CAACG,UAAU,CAACC,WAAW;MACvC,IAAI,CAACC,MAAM,GAACL,GAAG,CAACG,UAAU;MAC1BR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACS,MAAM,CAAC;MACxBV,OAAO,CAACC,GAAG,CAAC,IAAI,CAACK,QAAQ,CAAC;MAC5B,IAAI,CAACK,MAAM,GAAEC,IAAI,CAACC,SAAS,CAACD,IAAI,CAACE,KAAK,CAACT,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;MAClD,IAAI,CAACU,kBAAkB,CAAC,qBAAqB,CAAC;MAC9C,IAAI,CAACpB,KAAK,EAAE;IAEd,CAAC,EACCqB,GAAG,IAAG;MACJhB,OAAO,CAACC,GAAG,CAACe,GAAG,CAAC;MAChB,IAAI,CAACC,gBAAgB,CAACD,GAAG,CAACE,KAAK,CAAC;IAClC,CAAC,CAAC;EACR;EACAnB,qBAAqB;IACnB,IAAI,IAAI,CAACX,SAAS,CAAC+B,GAAG,CAAC,WAAW,CAAC,EAAErB,OAAO,EAC1C,OAAO,IAAI,CAACmB,gBAAgB,CAAC,qBAAqB,CAAC;EACvD;EACAA,gBAAgB,CAACG,OAAe;IAC/B,OAAO,IAAI,CAACpC,MAAM,CAACkC,KAAK,CAACE,OAAO,CAAC;EAClC;EAEOL,kBAAkB,CAACK,OAAe;IACxC,OAAO,IAAI,CAACpC,MAAM,CAACqC,OAAO,CAACD,OAAO,CAAC;EACpC;CAED;AA9EYvC,gBAAgB,eAN5BH,SAAS,CAAC;EACT4C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GAEW3C,gBAAgB,CA8E5B;SA9EYA,gBAAgB","names":["Component","FormControl","Validators","ProfileComponent","constructor","fb","toastr","service","ngOnInit","loadForm","formGroup","group","DialField","required","SourceIdField","LangIdField","categoy","Clear","reset","AddNewProfile","invalid","HandleConditionalForm","console","log","value","createNewProfile","subscribe","res","response","options","bucketInfo","optionsList","bucket","object","JSON","stringify","parse","showToasterSuccess","err","showToasterError","error","get","message","success","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\slashin\\Desktop\\Repos\\Applications\\WorkShop Orange\\Technical\\WorkShop\\WebApiProject\\ClientApp\\src\\app\\_components\\profileStatus\\profile\\profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { BucketInfoModel, CheckProfileStatusResponseModel, ErrorDocModel, OptionsListModel } from 'src/app/_models/CheckProfileStatusResponseModel';\nimport { ProfileService } from 'src/app/_services/profile.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\n\nexport class ProfileComponent implements OnInit {\n\n  bucketInfo!: BucketInfoModel;\n  optionsList!:OptionsListModel; \n  errorDoc!:ErrorDocModel; \n  //CheckProfileStatusResponseModel!: CheckProfileStatusResponseModel;\n  formGroup!: FormGroup;\n  DialField: FormControl = new FormControl;\n  SourceIdField: FormControl = new FormControl;\n  LangIdField: FormControl = new FormControl;\n  bucket:any[] = [];  \n  response: any;\n  options: any[] = [];\n  object!: string;\n  \n\n\n  \n  constructor(private fb: FormBuilder,\n    private toastr: ToastrService,\n    public service: ProfileService) {\n  }\n\n  ngOnInit() {\n\n    this.loadForm();\n    \n  }\n\n  loadForm() {\n    this.formGroup = this.fb.group({\n      DialField: [\"\", [Validators.required]],\n      SourceIdField: [\"\"],\n      LangIdField: [\"\"],\n      categoy:[\"\"]\n    });\n  }\n\n  Clear() {\n      this.formGroup.reset();\n       this.loadForm();\n  }\n\n  AddNewProfile() {\n    if (this.formGroup.invalid) {\n      this.HandleConditionalForm();\n      return\n    }\n  console.log(\"AddNewProfile\",this.formGroup.value  );\n    return this.service.createNewProfile(this.formGroup.value)\n      .subscribe((res) => {\n       this.response=res;\n       this.options=res.bucketInfo.optionsList\n       this.bucket=res.bucketInfo;\n       console.log(this.bucket);\n       console.log(this.response);\n     this.object= JSON.stringify(JSON.parse(res), null, 2);\n        this.showToasterSuccess(\"Successfully Posted\");\n        this.Clear();\n\n      },\n        err => {\n          console.log(err);\n          this.showToasterError(err.error);\n        });\n  }\n  HandleConditionalForm(): any {\n    if (this.formGroup.get(\"dialField\")?.invalid)\n      return this.showToasterError('Invalid Dial Number');\n  }\n  showToasterError(message: string) {\n   return this.toastr.error(message)\n  }\n\n  public showToasterSuccess(message: string) {\n   return this.toastr.success(message)\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}